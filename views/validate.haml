#result
  - if @alert.valid?

    %h2.valid Your CAP Document Is Valid!

    %p.valid
      The document you submitted has been validated as CAP
      = @alert.class::CAP_VERSION

  - else
    %h2.invalid Your CAP Document Is Not Valid!

    %p.invalid Validation errors will be listed in the Errors tab.


#tabs
  %ul
    %li
      %a{ :href => '#original_tab'}Original
    - if @alert.valid?
      %li
        %a{ :href => '#xml_tab' }Exported XML
      %li 
        %a{ :href => '#map_tab' }Map
    - else
      %li
        %a{ :href => '#errors_tab' }Errors

  #original_tab
    %form{ :action => '/validate', :method => 'post' } 
      %textarea{ :name => 'cap_data', :rows => 25, :cols => 80 }
        ~ params[ :cap_data ]
      %p
        %input#validate_button{ :type => "submit", :value => "Validate" }
        %a#clear_button{ href: "/" }
          Clear
  - if @alert.valid?
    #map_tab
      #map
      %script{ :type => 'text/javascript' }
        var fromProjection = new OpenLayers.Projection("EPSG:4326"); // transform from WGS 1984
        var toProjection = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection

        var map = new OpenLayers.Map('map',{
        units: 'm',
        projection: fromProjection,
        displayProjection: toProjection 
        });
        //var base = new OpenLayers.Layer.WMS( "OpenLayers WMS", "http://vmap0.tiles.osgeo.org/wms/vmap0", {layers: 'basic'} );
        var base = new OpenLayers.Layer.OSM();
        map.addLayer( base );
        bounds = new OpenLayers.Bounds();
        var markers = new OpenLayers.Layer.Markers( "Markers" );
        map.addLayer(markers);

        var size = new OpenLayers.Size(21,25);
        var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
        var icon = new OpenLayers.Icon('http://www.openlayers.org/dev/img/marker.png', size, offset);


        - polygons = @alert.infos.map{ |i| i.areas.map{ |a| a.polygons }}.flatten.compact
        var polygonLayer = new OpenLayers.Layer.Vector( "Polygon Area" );
        - polygons.each do |polygon|
          var polygon = new OpenLayers.Geometry.Polygon( new OpenLayers.Geometry.LinearRing([
          = polygon.points.map{ |point| "new OpenLayers.Geometry.Point(#{ point.longitude }, #{ point.lattitude })" }.join(', ')
          ]));
          polygon.calculateBounds();
          bounds.extend( polygon.getBounds());

          var polygonFeature = new OpenLayers.Feature.Vector( polygon.transform( fromProjection, toProjection ));
          polygonLayer.addFeatures( polygonFeature );
          var marker = new OpenLayers.Marker( polygon.getBounds().getCenterLonLat(), icon.clone())
          markers.addMarker( marker );

        map.addLayer( polygonLayer );

        - circles = @alert.infos.map{ |i| i.areas.map{ |a| a.circles }}.flatten.compact
        var circleLayer = new OpenLayers.Layer.Vector( "Circle Area" );
        - circles.each do |circle|
          var circle = OpenLayers.Geometry.Polygon.createRegularPolygon(
          = "new OpenLayers.Geometry.Point( #{ circle.longitude }, #{ circle.lattitude } ),#{ circle.radius * 0.009 }, 25, 0"
          );
          circle.calculateBounds();
          bounds.extend( circle.getBounds());

          var circleFeature = new OpenLayers.Feature.Vector( circle.transform( fromProjection, toProjection ));
          circleLayer.addFeatures( circleFeature );
          
        map.addLayer( circleLayer );

        map.zoomToExtent( bounds.transform( fromProjection, toProjection ));

    #xml_tab
      ~ CodeRay.scan( @xml_string, :xml).div( :line_numbers => :table )

  - else
    #errors_tab
      %h3 Alert
      %ul
        - @alert.errors.full_messages.each do |error|
          %li= error
      - @alert.infos.each do |info|
        - if info.errors.full_messages.any?
          %h4 Info
          %ul
            - info.errors.full_messages.each do |error|
              %li= error
          - info.event_codes.each do |event_code|
            - if event_code.errors.full_messages.any?
              %h5 Event Code
              %ul
                - event_code.errors.full_messages.each do |error|
                  %li= error
          - info.parameters.each do |parameter|
            - if parameter.errors.full_messages.any?
              %h5 Parameter
              %ul
                - parameter.errors.full_messages.each do |error|
                  %li= error
          - info.resources.each do |resource|
            - if resource.errors.full_messages.any?
              %h5 Resource
              %ul
                - resource.errors.full_messages.each do |error|
                  %li= error
          - info.areas.each do |area|
            - if area.errors.full_messages.any?
              %h5 Area
              %ul
                - area.errors.full_messages.each do |error|
                  %li= error
