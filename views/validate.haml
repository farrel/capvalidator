#result
  - if @alert.valid?

    %h2.valid Your CAP Document Is Valid!

    %p.valid
      The document you submitted has been validated as CAP
      = @alert.class::CAP_VERSION

  - else
    %h2.invalid Your CAP Document Is Not Valid!

    %p.invalid Validation errors will be listed in the Errors tab.


#tabs
  %ul
    %li
      %a{ :href => '#original_tab'}Original XML
    - if @alert.valid?
      %li
        %a{ :href => '#xml_tab' }Exported XML
      %li 
        %a{ :href => '#map_tab' }Map
    - else
      %li
        %a{ :href => '#errors_tab' }Errors

  #original_tab
    %form{ :action => '/validate', :method => 'post' } 
      %textarea{ :name => 'cap_data', :rows => 25, :cols => 80 }
        ~ params[ :cap_data ]
      %p
        %input#validate_button{ :type => "submit", :value => "Validate" }
        %a#clear_button{ href: "/" }
          Clear
  - if @alert.valid?
    #map_tab
      #map

      %script{ :type => 'text/javascript' }
        var polygonsData = [
        = @alert.infos.map{ |info| info.areas.map{ |area| area.polygons.any? ? { 'description' =>  area.area_desc, 'polygons' => area.polygons.map( &:points ).map{ |points| points.map{ |point| [ point.longitude, point.lattitude ]}}}.to_json : nil }}.compact.join(',')
        ];

        var circlesData = [
        = @alert.infos.map{ |info| info.areas.map{ |area| area.circles.any? ? [ area.area_desc, area.circles.map{ |circle| [ circle.longitude, circle.lattitude, circle.radius ]}].to_json : nil }}.compact.join(',')
        ];

      :javascript
        var bounds = new OpenLayers.Bounds();
        var map = new OpenLayers.Map('map',{
          units: 'm',
          projection: fromProjection,
          displayProjection: toProjection });
        var osm = new OpenLayers.Layer.OSM();
        map.addLayer( osm );


        var polygons = new OpenLayers.Layer.Vector( "Polygons" );
        map.addLayer( polygons );

        $.each( polygonsData, function( i, polygonData ){
          polygons.addFeatures( $.map( polygonData[ "polygons" ], function( polygonCoords, j ){
            return createPolygonFeature( polygonData[ "description" ], polygonCoords );
          }));
        });
        bounds.extend( polygons.getDataExtent());

        var circles = new OpenLayers.Layer.Vector( "Circles" );
        map.addLayer( circles );

        map.zoomToExtent( bounds );

    #xml_tab
      ~ CodeRay.scan( @xml_string, :xml).div( :line_numbers => :table )

  - else
    #errors_tab
      %h3 Alert
      %ul
        - @alert.errors.full_messages.each do |error|
          %li= error
      - @alert.infos.each do |info|
        - if info.errors.full_messages.any?
          %h4 Info
          %ul
            - info.errors.full_messages.each do |error|
              %li= error
          - info.event_codes.each do |event_code|
            - if event_code.errors.full_messages.any?
              %h5 Event Code
              %ul
                - event_code.errors.full_messages.each do |error|
                  %li= error
          - info.parameters.each do |parameter|
            - if parameter.errors.full_messages.any?
              %h5 Parameter
              %ul
                - parameter.errors.full_messages.each do |error|
                  %li= error
          - info.resources.each do |resource|
            - if resource.errors.full_messages.any?
              %h5 Resource
              %ul
                - resource.errors.full_messages.each do |error|
                  %li= error
          - info.areas.each do |area|
            - if area.errors.full_messages.any?
              %h5 Area
              %ul
                - area.errors.full_messages.each do |error|
                  %li= error
